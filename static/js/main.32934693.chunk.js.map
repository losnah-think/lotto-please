{"version":3,"sources":["App.js","index.js"],"names":["Title","Text","Typography","App","predictions","setPredictions","useState","count","setCount","loading","setLoading","error","setError","React","createElement","style","padding","level","textAlign","marginBottom","marginTop","InputNumber","min","value","onChange","marginRight","Button","type","onClick","fetchPredictions","fetch","concat","then","res","ok","Error","json","data","catch","err","console","Alert","message","showIcon","length","Row","gutter","justify","map","p","idx","Col","xs","sm","md","lg","key","Card","title","bordered","strong","display","predicted_numbers","join","predicted_bonus","ReactDOM","createRoot","document","getElementById","render","ConfigProvider"],"mappings":"qPAKA,MAAMA,MAAEA,EAAKC,KAAEA,GAASC,IAgFTC,MA9Ef,WACE,MAAOC,EAAaC,GAAkBC,mBAAS,KACxCC,EAAOC,GAAYF,mBAAS,IAC5BG,EAASC,GAAcJ,oBAAS,IAChCK,EAAOC,GAAYN,mBAAS,MAuBnC,OACEO,IAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,SACrBH,IAAAC,cAACd,EAAK,CAACiB,MAAO,EAAGF,MAAO,CAAEG,UAAW,WAAY,0CACjDL,IAAAC,cAAA,OAAKC,MAAO,CAAEG,UAAW,SAAUC,aAAc,SAC/CN,IAAAC,cAACb,EAAI,KAAC,0GACNY,IAAAC,cAAA,OAAKC,MAAO,CAAEK,UAAW,SACvBP,IAAAC,cAACO,IAAW,CACVC,IAAK,EACLC,MAAOhB,EACPiB,SAAWD,GAAUf,EAASe,GAC9BR,MAAO,CAAEU,YAAa,UAExBZ,IAAAC,cAACY,IAAM,CAACC,KAAK,UAAUC,QAjCNC,KACvBnB,GAAW,GACXE,EAAS,MACTkB,MAAK,kEAAAC,OAAmExB,IACrEyB,KAAKC,IACJ,IAAKA,EAAIC,GACP,MAAM,IAAIC,MAAM,4FAElB,OAAOF,EAAIG,SAEZJ,KAAKK,IACJhC,EAAegC,GACf3B,GAAW,KAEZ4B,MAAMC,IACLC,QAAQ7B,MAAM4B,GACd3B,EAAS,+KACTF,GAAW,MAgByCD,QAASA,GAAS,8BAOvEE,GACCE,IAAAC,cAAA,OAAKC,MAAO,CAAEG,UAAW,SAAUC,aAAc,SAC/CN,IAAAC,cAAC2B,IAAK,CAACC,QAAS/B,EAAOgB,KAAK,QAAQgB,UAAQ,KAI/CvC,EAAYwC,OAAS,EACpB/B,IAAAC,cAAC+B,IAAG,CAACC,OAAQ,CAAC,GAAI,IAAKC,QAAQ,UAC5B3C,EAAY4C,IAAI,CAACC,EAAGC,IACnBrC,IAAAC,cAACqC,IAAG,CAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,IAAKN,GACtCrC,IAAAC,cAAC2C,IAAI,CAACC,MAAK,GAAA3B,OAAKmB,EAAM,EAAC,6BAASS,UAAU,EAAM5C,MAAO,CAAEG,UAAW,WAClEL,IAAAC,cAACb,EAAI,CAAC2D,QAAM,EAAC7C,MAAO,CAAE8C,QAAS,QAAS1C,aAAc,SAAU,iBACzD8B,EAAEa,kBAAkBC,KAAK,OAEhClD,IAAAC,cAACb,EAAI,CAAC0B,KAAK,aAAY,uBACfsB,EAAEe,sBAOjBrD,GACCE,IAAAC,cAAA,OAAKC,MAAO,CAAEG,UAAW,WACvBL,IAAAC,cAACb,EAAI,CAAC0B,KAAK,aAAY,uHCvEtBsC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHxD,IAAAC,cAACwD,IAAc,KACbzD,IAAAC,cAACX,EAAG","file":"static/js/main.32934693.chunk.js","sourcesContent":["// lotto-frontend/src/App.js\nimport React, { useState } from 'react';\nimport 'antd/dist/reset.css';  // Ant Design v5 스타일\nimport { Button, InputNumber, Card, Typography, Row, Col, Alert } from 'antd';\n\nconst { Title, Text } = Typography;\n\nfunction App() {\n  const [predictions, setPredictions] = useState([]);\n  const [count, setCount] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);  // 에러 상태 추가\n\n  const fetchPredictions = () => {\n    setLoading(true);\n    setError(null);  // 요청 시작 시 에러 상태 초기화\n    fetch(`https://lotto-backend-b8184723673f.herokuapp.com/predict?count=${count}`)\n      .then(res => {\n        if (!res.ok) {\n          throw new Error('네트워크 응답에 문제가 있습니다.');\n        }\n        return res.json();\n      })\n      .then(data => {\n        setPredictions(data);\n        setLoading(false);\n      })\n      .catch(err => {\n        console.error(err);\n        setError('예측 결과를 가져오는 데 실패했습니다. 나중에 다시 시도해주세요.');\n        setLoading(false);\n      });\n  };\n\n  return (\n    <div style={{ padding: '50px' }}>\n      <Title level={2} style={{ textAlign: 'center' }}>로또 번호 예측</Title>\n      <div style={{ textAlign: 'center', marginBottom: '20px' }}>\n        <Text>몇 세트의 예측 결과를 받고 싶으신가요?</Text>\n        <div style={{ marginTop: '10px' }}>\n          <InputNumber \n            min={1} \n            value={count} \n            onChange={(value) => setCount(value)}\n            style={{ marginRight: '10px' }}\n          />\n          <Button type=\"primary\" onClick={fetchPredictions} loading={loading}>\n            예측하기\n          </Button>\n        </div>\n      </div>\n      \n      {/* 에러 메시지 표시 */}\n      {error && (\n        <div style={{ textAlign: 'center', marginBottom: '20px' }}>\n          <Alert message={error} type=\"error\" showIcon />\n        </div>\n      )}\n      \n      {predictions.length > 0 ? (\n        <Row gutter={[16, 16]} justify=\"center\">\n          {predictions.map((p, idx) => (\n            <Col xs={24} sm={12} md={8} lg={6} key={idx}>\n              <Card title={`${idx + 1}번째 예측`} bordered={true} style={{ textAlign: 'center' }}>\n                <Text strong style={{ display: 'block', marginBottom: '10px' }}>\n                  번호: {p.predicted_numbers.join(', ')}\n                </Text>\n                <Text type=\"secondary\">\n                  보너스: {p.predicted_bonus}\n                </Text>\n              </Card>\n            </Col>\n          ))}\n        </Row>\n      ) : (\n        !error && (  // 에러가 없을 때만 \"결과 없음\" 메시지 표시\n          <div style={{ textAlign: 'center' }}>\n            <Text type=\"secondary\">결과 없음. \"예측하기\" 버튼을 눌러보세요.</Text>\n          </div>\n        )\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport { ConfigProvider } from 'antd';\nimport 'antd/dist/reset.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <ConfigProvider>\n    <App />\n  </ConfigProvider>\n);\n"],"sourceRoot":""}